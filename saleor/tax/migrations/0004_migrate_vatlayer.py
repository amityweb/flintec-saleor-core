# Generated by Django 3.2.14 on 2022-07-27 16:05

from collections import defaultdict
from typing import List, Optional
from django_countries import countries
from django.db import migrations
from django_prices_vatlayer.models import VAT


VATLAYER_CODE_META_KEY = "vatlayer.code"
VATLAYER_ID = "mirumee.taxes.vatlayer"

BATCH_SIZE = 500


def _clear_country_code(country_code: str) -> Optional[str]:
    return countries.alpha2(country_code.strip()) if country_code else None


def _clear_str_list_country_codes(country_codes: str) -> List[str]:
    countries = [_clear_country_code(cc) for cc in country_codes.split(",")]
    return [cc for cc in countries if cc]


def queryset_in_batches(queryset):
    """Slice a queryset into batches.

    Input queryset should be sorted be pk.
    """
    start_pk = 0
    while True:
        qs = queryset.filter(pk__gt=start_pk)[:BATCH_SIZE]
        pks = list(qs.values_list("pk", flat=True))
        if not pks:
            break
        yield pks
        start_pk = pks[-1]


def create_tax_classes(apps):
    """Create tax classes by migrating currently used Vatlayer tax codes.

    Migrate Vatlayer tax codes which are stored in metadata of products and product
    types. For each found code get or create a TaxClass instance and assign to the tax
    class.
    """

    Product = apps.get_model("product", "Product")
    ProductType = apps.get_model("product", "ProductType")
    TaxClass = apps.get_model("tax", "TaxClass")

    product_types = (
        ProductType.objects.filter(metadata__has_key=VATLAYER_CODE_META_KEY)
        .values("id", "metadata")
        .order_by("pk")
    )
    for batch_pks in queryset_in_batches(product_types):
        tax_classes_from_product_types = defaultdict(list)
        product_types = ProductType.objects.filter(pk__in=batch_pks)
        for product_type in product_types:
            tax_class_name = product_type.metadata.get(VATLAYER_CODE_META_KEY)
            tax_classes_from_product_types[tax_class_name].append(product_type.pk)

        for name, ids in tax_classes_from_product_types.items():
            tax_class, _ = TaxClass.objects.get_or_create(name=name)
            ProductType.objects.filter(id__in=ids).update(tax_class=tax_class)

    products = (
        Product.objects.filter(metadata__has_key=VATLAYER_CODE_META_KEY)
        .values("id", "metadata")
        .order_by("pk")
    )
    tax_classes_from_products = defaultdict(list)
    for batch_pks in queryset_in_batches(products):
        products = Product.objects.filter(pk__in=batch_pks)
        for product in products:
            tax_class_name = product.metadata.get(VATLAYER_CODE_META_KEY)
            tax_classes_from_products[tax_class_name].append(product.pk)

        for name, ids in tax_classes_from_products.items():
            tax_class, _ = TaxClass.objects.get_or_create(name=name)
            Product.objects.filter(id__in=ids).update(tax_class=tax_class)


def create_tax_configurations(apps, vatlayer_configs):
    TaxConfiguration = apps.get_model("tax", "TaxConfiguration")
    TaxConfigurationPerCountry = apps.get_model("tax", "TaxConfigurationPerCountry")

    # Map of countries to use origin country's tax, based on the
    # `countries_to_calculate_taxes_from_origin` setting. If a country code appears
    # more than once in the list, we override is with the last seen origin_country.
    use_origin_country_map = {}

    for vatlayer_config in vatlayer_configs:
        config_dict = {
            item["name"]: item["value"] for item in vatlayer_config.configuration
        }
        channel = vatlayer_config.channel

        # Migrate `countries_to_calculate_taxes_from_origin` setting.
        origin_country = _clear_country_code(config_dict["origin_country"])
        countries_to_calculate_taxes_from_origin = _clear_str_list_country_codes(
            config_dict["countries_to_calculate_taxes_from_origin"]
        )
        for country in countries_to_calculate_taxes_from_origin:
            use_origin_country_map[country] = origin_country

        # Migrate `excluded_countries` to new tax configuration.
        excluded_countries = _clear_str_list_country_codes(
            config_dict["excluded_countries"]
        )
        if excluded_countries:
            tax_configuration = channel.tax_configuration
            if not tax_configuration:
                tax_configuration = TaxConfiguration.objects.create(channel=channel)

            for country in excluded_countries:
                TaxConfigurationPerCountry.objects.update_or_create(
                    tax_configuration=tax_configuration,
                    country=country,
                    defaults={"charge_taxes": False},
                )

    return use_origin_country_map


def create_tax_rates(apps, use_origin_country_map):
    TaxClass = apps.get_model("tax", "TaxClass")
    TaxClassCountryRate = apps.get_model("tax", "TaxClassCountryRate")

    tax_classes = TaxClass.objects.all()
    vat_rates = VAT.objects.all()

    rates = {}
    for tax_class in tax_classes:
        for vat in vat_rates:
            # Collect standard rates to create
            standard_rate = TaxClassCountryRate(
                tax_class=tax_class,
                country=vat.country_code,
                rate=vat.data["standard_rate"],
            )
            rates[(tax_class.id, vat.country_code)] = standard_rate

            # Collect reduced rates to create
            if tax_class.name in vat.data["reduced_rates"]:
                reduced_rate = TaxClassCountryRate(
                    tax_class=tax_class,
                    country=vat.country_code,
                    rate=vat.data["reduced_rates"][tax_class.name],
                )
                rates[(tax_class.id, vat.country_code)] = reduced_rate

        # Swap rates for countries that should use origin country tax rate instead of
        # own rates.
        for country_code, origin in use_origin_country_map.items():
            country_rate_obj = rates.get((tax_class.id, country_code))
            origin_rate_obj = rates.get((tax_class.id, origin))
            if country_rate_obj and origin_rate_obj:
                country_rate_obj.rate = origin_rate_obj.rate
                rates[(tax_class.id, country_code)] = country_rate_obj

    TaxClassCountryRate.objects.bulk_create(rates.values())


def migrate_vatlayer(apps, _schema_editor):
    PluginConfiguration = apps.get_model("plugins", "PluginConfiguration")

    vatlayer_configs = PluginConfiguration.objects.filter(
        active=True, identifier=VATLAYER_ID
    )
    is_vatlayer_enabled = vatlayer_configs.exists()

    create_tax_classes(apps)

    if is_vatlayer_enabled:
        use_origin_country_map = create_tax_configurations(apps, vatlayer_configs)
        create_tax_rates(apps, use_origin_country_map)


class Migration(migrations.Migration):

    dependencies = [
        ("tax", "0003_add_manage_taxes_permission"),
    ]

    operations = [migrations.RunPython(migrate_vatlayer, migrations.RunPython.noop)]
